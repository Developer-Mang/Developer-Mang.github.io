{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/02/20/hello-world/"},{"title":"My blog start","text":"Dev.Mang의 블로그 제작 시작","link":"/2020/02/20/My-blog-start/"},{"title":"데이터 타입","text":"1. 타입의 종류데이터 타입에는원시 타입 : 숫자, 문자열, 불리언, undefined, null, Symbol객체 타입 : 객체, 함수, 배열 등이 있다. 숫자 : 64비트의 부동소수점 형식. 모든 수를 실수로 처리 문자열 : 16비트 유니코드 문자 집합 형식템플릿 리터럴 : 편리한 문자열 처리기능을 제공 불리언 : 논리적 결과를 나타냄. true/false 만 있음. undefined : 명확한 값이 들어있지 않은 변수에 들어있는 값. null : 변수 안에 값이 없다는 것을 알려주는 값.이전에 참조하던 값을 더이상 참조하지 않겠다! Symbol : 수시로 변하는 객체에 유일한 프로퍼티 키를 주어서 제어하기 위해 사용되는 Symbol 타입 객체를 명시하는 타입 값. 객체 : 위에 있는 원시 타입 값과 다르게 변할 수 있는 값? 템플릿 리터털 멀티라인 문자열 : 줄바꿈을 별도의 코드를 사용하지 않고 표현가능하다. 표현식 삽입 : 표현식이 평가된 값을 문자열로 보여준다. 테그드 템플릿 : 함수에 넣을 프로퍼티를 쉽게 넣을 수 있다. 2. 타입의 필요성 모든 값은 메모리에 저장 및 참조 가능해야 하기 때문에 값에 할당할 크기를 알아야한다. 메모리에 2진수로 저장되는데 참조할 때 어떻게 해석하느냐에 따라 결과가 달라지기 때문이다. 3. 동적 타입 언어와 정적 타입 언어 동적 타입 언어 : 자바스크립트처럼 변수를 선언할 때 타입 값을 지정하지 않아 상황에 따라 타입을 바꿀 수 있는 언어 정적 타입 언어 : c 언어 처럼 변수를 선언할 때 타입을 같이 지정해야하는 언어 동적 타입 언어즉, 변수 선언 단계에서 타입이 결정되는 것이 아니라 변수에 재할당 된 값에 따라 변수의 타입이 결정된다. 값이 확정으로 할당되기 전까지 타입을 확신할 수 없다. 따라서 주의 사항이 생긴다. 1. 필요한 경우 제한적으로 사용할 것. 2. 변수 유효범위(스코프)를 최대한 좁게 설정할 것. 3. 전역변수는 최대한 피할 것. 4. 상수를 애용할 것. 5. 변수 이름을 시멘틱하게 만들 것.","link":"/2020/02/20/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85/"},{"title":"표현식과 문","text":"1. 값이란?식(표현식)이 평가되어 만들어진 결과. 2. 리터럴이란?사람을 기준으로 만들어진 문자, 숫자, 기호, 등으로 사용된 것을 평가해서 동일한 값을 생성할 수 있는 표기 방식코드가 실행되는 시점(런타임,runtime)에 리터럴을 평가하여 값으로 만든다.리터럴을 평가하면 값이 나온다. 따라서 리터럴도 표현식이다. 3. 표현식이란?평가하여 결과로 값이 나오는 문.값으로 평가되는 것은 모두 표현식!!표현식인지 확인하는 방법은 변수에 할당해보면 된다. 4. 문이란?프로그램을 구성하는 기본 단위. 토큰으로 이루어져있다.최소 실행 단위이며 컴퓨터에게 보내는 명령이다.따라서, 문은 선언문, 할당문, 조건문, 반복문으로 구분 가능하다.문에는 세미콜론으로 종료를 나타낸다. 하지만 안써도 돌아가는 이유는 자바스크립트 엔진이 문의 끝이라고 생각하는 부분에 자동적으로 만든다. 5. 토큰이란?문을 구성하는 코드의 기본 요소이다. 키워드, 식별자, 연산자, 리터럴, 세미콜론, 마침표가 들어간다. 6. 완료값이란?브라우저(크롬)안에서 표현식이 아닌 문을 입력하면 undefined를 출력한다.이것을 완료값이라고 한다.","link":"/2020/02/20/%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC-%EB%AC%B8/"},{"title":"연산자","text":"연산자란?하나 이상의 표현식에서 산술, 할당, 비교, 논리, 타입, 지수 연산을 하게 하는 토근이다.피연산자를 연산하여 새로운 값을 만든다. = 표현식 이다. 부수효과란?대부분의 연산자는 피연산자에게 영향을 주지 않지만 단항 산술 연산자, 할당 연산자, delete 연산자의 경우 좌항 피연산자에게 반환되는 값을 재할당한다. 이것을 부수효과라고 한다. 산술연산자란?피연산자를 대상으로 수학적 계산을 수행해 새로운 값을 만드는 토큰이다. 이항 산술 연산자 (+,-,*,/,%)2개의 피연산자를 사칙연산을 하여 새로운 숫자 타입의 값을 만든다. 단항 산술 연산자 (++,–,+,-)1개의 피연산자를 증가/감소 한 후에 다시 할당을 하거나 음수를 양수로 양수를 음수로 변환하여 할당한다.숫자 타입이 아닌 피연산자에 + 단항 연산자를 사용시 숫자 타입으로 바꾸어준다. 문자열 연결 연산자 (+)피연산자 중에 하나라도 문자열이 포함되어 있을 경우 아닌 피연산자를 암묵적인 타입 변환을 통해 문자열로 바꾸어 하나의 문자열 값을 만든다. 할당 연산자 (=,+=,-=,*=,/=,%=)우항에 있는 피연산자의 평가 결과를 좌항에 변수에 할당 한다. 할당문은 우항의 평가 결과를 값으로 갖는 표현식이다. 비교 연산자란?피연산자를 비교하여 불리언 값을 반환하는 토큰이다. 동등/일치 비교 연산자 (==,===,!=,!==)피연산자가 같은 값을 갖는지 비교한다.동등 비교 연산자(==,!=)의 경우에는 암묵적인 타입 변환을 통해 타입을 일치시킨 후에 비교한다. NaN 값은 동등/일치 비교 연산을 할 경우 무조건 false 값을 출력한다. 비교하려면 isNaN()를 사용해야한다. 대소 관계 비교 연산자 (&gt;,&lt;,&gt;=,&lt;=)피연산자의 크기를 비교한다. 삼항 조건 연산자란?조건식의 평가 결과에 따라 반환할 값을 선택하는 삼항 조건 연산자 표현식에서 사용하는 토큰이다. (? :) 조건식은 불리언 타입으로 평가되어야 하기 때문에 조건식 평가 결과가 불리언 값이 아닐 경우 암묵적으로 불리언 타입으로 변환된다. 논리 연산자란?피연산자의 논리를 연산하는 토큰이다.논리합(||/or 연산), 논리곱(&amp;&amp;/and 연산), 부정(!/not 연산) 이 있다.피연산자를 암묵적으로 불리언 값으로 변환을 하여 연산한다.?? 불리언 값으로 평가 될 수 있다 ?? 쉼표 연산자란?, 왼쪽 피연산자 부터 평가하며 맨 오른쪽에 있는 피연산자의 값을 반환하는 토큰이다. 그룹 연산자란?() 표현식의 우선 순위를 높여준다. typeof 연산자란?피연산자의 데이터 타입을 문자열로 변환하는 토큰이다. null타입만 변환하지 못한다. null 타입은 object 객체로 반환한다. 선언하지 않은 식별자를 피연산자로 사용할 경우 undefined를 반환한다. 지수 연산자란?* 지수로 거듭 제곱한 숫자 값을 반환한다. *음수의 경우 괄호로 묶어주어야 한다. 모든 이항 연산자 보다 우선 순위로 연산한다.","link":"/2020/02/21/%EC%97%B0%EC%82%B0%EC%9E%90/"},{"title":"제어문","text":"제어문이란?제어문을 사용하면 코드의 실행의 흐름을 제어할 수 있다. 블록문0개 이상의 문을 중괄호로 묶은 것.함수 정의할 때 사용하는 것이 일반적블록문 뒤에는 ;을 붙이지 않는다. 조건문 if…else 문주어진 조건식의 평가 결과에 따라 블럭문을 실행할지 결정.참인 경우 다음 블록을 실행, 거짓인 경우 else 문 다음의 블록문을 실행한다. 조건문이 불리언 값이 아닌 값으로 평가 될 때는 암묵적 타입 변환으로 불리언 값으로 변환되어 실행한다.*코드 내에 블록문 뒤에 switch 문주어진 조건식의 평가 경과에 따라 case문의 실행을 결정한다.조건식이 반드시 불리언 값이 필요가 없다. 다양한 상황에 따라 실행할 코드 블록을 결정한다.case 문은 break;로 끝내주지 않으면 무조건 defult 문를 실행한다.(풀스루)반드시 해당 case에서 실행을 끝내고 싶을 경우 break;로 끝내주어야 한다. 반복문주어진 조건식의 결과가 참인 경우 계속 실행하고 거짓일 경우 까지 반복한다. for 문조건식의 변수 선언 후 조건식을 설정하고 증감식을 작성하는 것이 문법이다.ex) for (var i=0;i&lt;5;i++) { } 어떤 식도 선언하지 않으면 무한 루프를 한다.for 문을 중첩해 사용가능하다.-while 문증감식이 없이 조건식만 평가하여 결과가 참이면 코드 블록을 반복한다.do while문은 일단 조건식을 평가하지 않고 무조건 코드 블록을 한번 실행한다. 그리고 조건식을 평가한다. break 문코드 불록을 탈출한다. 레이블 문이다. 레이블 문이란?식별자가 붙어 식별자로 실행하는 분을 말한다. continue 문break 문이 코드 불록을 아예 탈출한다면 continue 문은 증감식으로 이동한다.","link":"/2020/02/24/%EC%A0%9C%EC%96%B4%EB%AC%B8/"},{"title":"타입 변환과 단축 평가","text":"타입 변환 이란?컴퓨터에서 입력되는 모든 값은 타입이 있다. 이 타입은 값이 처음 만들어질 때 확정이 되는데 친절한 javascript 는 참조하는 과정에서 의도적이든 암묵적으로 javascript 엔진에 의해 타입 변화가 일어는 경우가 생긴다. 암묵적 타입 변환표현식을 평가할 때 문맥을 고려하여 암묵적으로 값의 타입이 변환되는 것을 암묵적 타입 변환 또는 타입 강제 변환이라고 한다. 문자열 타입으로 변환‘+’ 연산자의 기능 중 문자열 연결 연산자를 사용해서 문자열 값을 만드는 것이다.피연산자 중에 하나라도 문자열 타입의 값이 있다면 나머지 값도 문자열 타입으로 암묵적 타입 변환한다. ex) 1 + ' ' // -> '1' symbol 타입은 어떠한 경우라도 문자열로 변환될 수 없다. 변환하려고 하면 TypeError를 출력한다.객체 타입은 문자열로 변환시 이상하게 나온다. 빈 배열 객체는 빈 문자열로 평가되며 배열 객체의 식별자를 참조하면 함수로 나온다. 숫자 타입으로 변환이항 산술 연산자 ‘+’를 제외하고 나머지 산술연산자는 숫자 타입의 값을 만드는 것이다.피연산자 중 숫자 타입 아닌 모든 값을 암묵적으로 숫자 타입으로 변환한다. ex1) +'1' // -> 1 ex2) +'ten' // -> NaN ex3) +true[/false] // -> 1[/0] ex4) +null // -> 0 ex5) +undefined // -> NaN ex6) +Symbol() // -> TypeError : Cannot convert a Symbol value to a number ex7) +{} // -> NaN ex8) +[] // -> 0 ex9) +[value1, value2] // -> NaN ex10) +(function( ){ }) // -> NaN Boolean 타입으로 변환논리 연산자는 Boolean 값을 비교해야 하며, 조건문의 평가 결과는 Boolean 값으로 평가 되어야 한다.조건문 안에 표현식이나 논리 연산자의 피연산자는 암묵적으로 Boolean 타입의 값으로 변환된다. false로 평가돠는 값 ) ‘false’ undefined null +0,-0 NaN ‘’(빈문자열) 위의 false 값으로 변환되는 경우를 제외하면 모두 true로 변환한다.논리 연산자 중 &amp;&amp; 와 || 의 경우는 평가를 할 때는 암묵적 타입 변환이 일어나지만 평가되는 값은 해당 표현식에 값을 결정하는 피연산자 표현식의 값으로 평가한다. // 조건문 ex1) if(NaN){ } // NaN -> false ex2) if('string'){ } // 'string' -> true // 논리 연산자 ex3) !!null // null -> false ex4) !!2 // 2 -> true 명시적 타입 변환의도적으로 값의 타입을 변환하는 것을 명시적 타입 변환 또는 타입 캐스팅이라고 한다.표준 빌트인 생성자 함수를 new연산자 없이 호출하는 방법과 빌트인 메소드를 사용하는 방법, 암묵적인 타입 변환을 이용해 재할당하는 방법이 있다. 문자열 타입으로 변환 String 생성자 함수 Object.prototype.toString 메소드 문자열 연결 연산자 ex1) String('true') // -> 'true' ex2) (Infinity).toString() // -> 'Infinity' ex3) null + '' // -> 'null' 숫자 타입으로 변환 Number 생성자 함수 parseInt, parseFloat 함수 문자열만 가능 단항 산술 연산자 + , - 이항 산술 연산자 - , * , / ex1) Number('true') // -> 1 ex2) parseInt('10') // -> 10 ex3) +'' // -> 0 ex4) undefined * 1 // -> NaN Boolean 타입으로 변환 Bloolean 생성자 함수 부정 논리 연산자 두번 !! ex1) Boolean('10') // -> true ex2) !!NaN // -> false 단축 평가논리 연산자 표현식의 경우 평가되면서 값에 결정을 하는 피연산자가 생기는 것을 단축 평가라고 한다.이 때 좌항 피연산 표현식의 암묵적 타입 변환 까지 일어난 후에 논리 연산자 표현식의 값으로 평가되는 표현식이라면 우항의 표현식을 평가하지 않는다. &amp;&amp;(논리 곱 / and 연산)피연산자 중 하나라도 false 인 경우 해당 논리 연산자 표현식의 평가는 무조건 false 이다. 따라서 좌항 피연산 표현식의 암묵적 타입 변환 까지 일어난 후에 평가되는 값이 false 라면 뒤에 표현식을 평가하지 않는다. ex) -1 > 0 && 1 + 3 // -1 > 0 && 1 + 3 -> false ||(논리 합 / or 연산)피연산자 중 하나라도 true 인 경우 해당 논리 연산자 표현식의 평가는 무조건 true 이다. 따라서 좌항 피연산 표현식의 암묵적 타입 변환 까지 일어난 후에 평가되는 값이 false 라면 뒤에 표현식을 평가하지 않는다. ex) '참' && nell // '참' && null -> '참' 값은 암묵적으로 타입 변환이 된 값이 아닌 원래 표현문이 평가된 값으로 평가된다. if 문은 단축 평가로 대체가 가능하다. var shortCut; var bln = [표현식]; if (bln) shortCut = '참' else shortCut = '거짓'; // bln에 할당되는 표현식이 true로 표현될 때 실행 shortCut bln && '참'; // bln 에 할당되는 표현식이 false로 표현될 때 실행 shortCut bln || '거짓';","link":"/2020/02/24/%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98%EA%B3%BC-%EB%8B%A8%EC%B6%95-%ED%8F%89%EA%B0%80/"}],"tags":[{"name":"컴퓨터 기초, 데이터 타입, 자바스크립트, 웹 개발","slug":"컴퓨터-기초-데이터-타입-자바스크립트-웹-개발","link":"/tags/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B8%B0%EC%B4%88-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9B%B9-%EA%B0%9C%EB%B0%9C/"},{"name":"컴퓨터 기초, 표현식, 문","slug":"컴퓨터-기초-표현식-문","link":"/tags/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B8%B0%EC%B4%88-%ED%91%9C%ED%98%84%EC%8B%9D-%EB%AC%B8/"},{"name":"컴퓨터 기초, javascripy, 데이터 타입, 타입 변환, 단축평가, 개념 정리","slug":"컴퓨터-기초-javascripy-데이터-타입-타입-변환-단축평가-개념-정리","link":"/tags/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B8%B0%EC%B4%88-javascripy-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98-%EB%8B%A8%EC%B6%95%ED%8F%89%EA%B0%80-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC/"}],"categories":[]}